{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"04f1086c-cfdd-5a71-ad12-f79a6dca0120","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = themes.future;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"React Testing and Us\"), mdx(\"hr\", null), mdx(\"h2\", null, \"By the numbers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"23 React Repositories\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Over 800 files tested (components, pages, redux, utils, etc.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Over 9000 tests across the front end space\")), mdx(\"img\", {\n    src: overNine,\n    width: \"25%\",\n    height: \"auto\",\n    style: {\n      width: '400px',\n      height: 'auto'\n    }\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Tools We Are Talking About Today\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jest\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React Testing Library\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Why Jest?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CLI test control\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Isolated and parallel\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mocking support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Snapshot testing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Built-in Code Coverage\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Why React Testing Library?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Makes it easier to test components output\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Light utility functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Helps resemble the way your software is used\")), mdx(\"hr\", null), mdx(\"img\", {\n    src: tdd\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Checkbox/Checkbox.text.tsx\\nimport { render } from \\\"@testing-library/react\\\";\\n\\nconst checkboxLabel = \\\"Do you know the muffin man?\\\";\\n\\ndescribe(\\\"Checkbox\\\", () => {\\n  it(\\\"should render the label for the checkbox\\\", () => {\\n    const { queryByLabelText } = render(\\n        <Checkbox label={checkboxLabel} />\\n    );\\n\\n    expect(queryByLabelText(checkboxLabel)).toBeTruthy();\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"7\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"7\"\n  }, \"// Checkbox/Checkbox.text.tsx\\nimport { render } from \\\"@testing-library/react\\\";\\n\\nconst checkboxLabel = \\\"Do you know the muffin man?\\\";\\n\\ndescribe(\\\"Checkbox\\\", () => {\\n  it(\\\"should render the label for the checkbox\\\", () => {\\n    const { queryByLabelText } = render(\\n        <Checkbox label={checkboxLabel} />\\n    );\\n\\n    expect(queryByLabelText(checkboxLabel)).toBeTruthy();\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"8:10\",\n    \"8:10\": true\n  }, \"// Checkbox/Checkbox.text.tsx\\nimport { render } from \\\"@testing-library/react\\\";\\n\\nconst checkboxLabel = \\\"Do you know the muffin man?\\\";\\n\\ndescribe(\\\"Checkbox\\\", () => {\\n  it(\\\"should render the label for the checkbox\\\", () => {\\n    const { queryByLabelText } = render(\\n        <Checkbox label={checkboxLabel} />\\n    );\\n\\n    expect(queryByLabelText(checkboxLabel)).toBeTruthy();\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"12\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"12\"\n  }, \"// Checkbox/Checkbox.text.tsx\\nimport { render } from \\\"@testing-library/react\\\";\\n\\nconst checkboxLabel = \\\"Do you know the muffin man?\\\";\\n\\ndescribe(\\\"Checkbox\\\", () => {\\n  it(\\\"should render the label for the checkbox\\\", () => {\\n    const { queryByLabelText } = render(\\n        <Checkbox label={checkboxLabel} />\\n    );\\n\\n    expect(queryByLabelText(checkboxLabel)).toBeTruthy();\\n  });\\n});\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Checkbox/Checkbox.tsx\\n\\nconst Checkbox = ({label}) => {\\n  const [isChecked, setIsChecked] = useState(false);\\n\\n  const onChange = () => {\\n    setIsChecked(!isChecked);\\n  };\\n\\n  return (\\n    <label>\\n      <input type=\\\"checkbox\\\" checked={isChecked} onChange={onChange} />\\n      {label}\\n    </label>\\n  );\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Checkbox/Checkbox.text.tsx\\nimport { render, screen } from \\\"@testing-library/react\\\";\\nimport userEvent from '@testing-library/user-event';\\n\\nconst checkboxLabel = \\\"Do you know the muffin man?\\\";\\nconst checkboxMessage = \\\"Who lives on drury lane?\\\";\\n\\ndescribe(\\\"Checkbox\\\", () => {\\n  it(\\\"should render the message when the checkbox is enabled\\\", () => {\\n    const { queryByLabelText } = render(\\n        <Checkbox message=\\\"Who lives on drury lane?\\\" />\\n    );\\n\\n    userEvent.click(queryByLabelText(checkboxLabel));\\n    \\n    expect(screen.getByText(checkboxMessage)).toBeTruthy();\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"9\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"9\"\n  }, \"// Checkbox/Checkbox.text.tsx\\nimport { render, screen } from \\\"@testing-library/react\\\";\\nimport userEvent from '@testing-library/user-event';\\n\\nconst checkboxLabel = \\\"Do you know the muffin man?\\\";\\nconst checkboxMessage = \\\"Who lives on drury lane?\\\";\\n\\ndescribe(\\\"Checkbox\\\", () => {\\n  it(\\\"should render the message when the checkbox is enabled\\\", () => {\\n    const { queryByLabelText } = render(\\n        <Checkbox message=\\\"Who lives on drury lane?\\\" />\\n    );\\n\\n    userEvent.click(queryByLabelText(checkboxLabel));\\n    \\n    expect(screen.getByText(checkboxMessage)).toBeTruthy();\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3,14\",\n    \"3,14\": true\n  }, \"// Checkbox/Checkbox.text.tsx\\nimport { render, screen } from \\\"@testing-library/react\\\";\\nimport userEvent from '@testing-library/user-event';\\n\\nconst checkboxLabel = \\\"Do you know the muffin man?\\\";\\nconst checkboxMessage = \\\"Who lives on drury lane?\\\";\\n\\ndescribe(\\\"Checkbox\\\", () => {\\n  it(\\\"should render the message when the checkbox is enabled\\\", () => {\\n    const { queryByLabelText } = render(\\n        <Checkbox message=\\\"Who lives on drury lane?\\\" />\\n    );\\n\\n    userEvent.click(queryByLabelText(checkboxLabel));\\n    \\n    expect(screen.getByText(checkboxMessage)).toBeTruthy();\\n  });\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"16\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"16\"\n  }, \"// Checkbox/Checkbox.text.tsx\\nimport { render, screen } from \\\"@testing-library/react\\\";\\nimport userEvent from '@testing-library/user-event';\\n\\nconst checkboxLabel = \\\"Do you know the muffin man?\\\";\\nconst checkboxMessage = \\\"Who lives on drury lane?\\\";\\n\\ndescribe(\\\"Checkbox\\\", () => {\\n  it(\\\"should render the message when the checkbox is enabled\\\", () => {\\n    const { queryByLabelText } = render(\\n        <Checkbox label={checkboxLabel} message={checkboxMessage} />\\n    );\\n\\n    userEvent.click(queryByLabelText(checkboxLabel));\\n    \\n    expect(screen.getByText(checkboxMessage)).toBeTruthy();\\n  });\\n});\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Checkbox/Checkbox.tsx\\n\\nconst Checkbox = ({label, message}) => {\\n  const [isChecked, setIsChecked] = useState(false);\\n\\n  const onChange = () => {\\n    setIsChecked(!isChecked);\\n  };\\n\\n  return (\\n    <>\\n      {isChecked && (<div>{message}</div>)}\\n      <label>\\n        <input type=\\\"checkbox\\\" checked={isChecked} onChange={onChange} />\\n        {label}\\n      </label>\\n    </>\\n  );\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// TextInput.tsx\\nit(\\\"calls onChange\\\", () => {\\n    const onChange = jest.fn();\\n    const placeholder = \\\"Username\\\";\\n    const { getByPlaceholderText } = setup({\\n      onChange,\\n      placeholder\\n    });\\n    const userInput = \\\"userTest123\\\";\\n    const textInput = getByPlaceholderText(placeholder);\\n    fireEvent.change(textInput as Element, {\\n      target: { value: userInput }\\n    });\\n\\n    expect(onChange).toHaveBeenCalled();\\n    expect(textInput).toHaveValue(userInput);\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3\"\n  }, \"// TextInput.tsx\\nit(\\\"calls onChange\\\", () => {\\n    const onChange = jest.fn();\\n    const placeholder = \\\"Username\\\";\\n    const { getByPlaceholderText } = setup({\\n      onChange,\\n      placeholder\\n    });\\n    const userInput = \\\"userTest123\\\";\\n    const textInput = getByPlaceholderText(placeholder);\\n    fireEvent.change(textInput as Element, {\\n      target: { value: userInput }\\n    });\\n\\n    expect(onChange).toHaveBeenCalled();\\n    expect(textInput).toHaveValue(userInput);\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5:8\",\n    \"5:8\": true\n  }, \"// TextInput.tsx\\nit(\\\"calls onChange\\\", () => {\\n    const onChange = jest.fn();\\n    const placeholder = \\\"Username\\\";\\n    const { getByPlaceholderText } = setup({\\n      onChange,\\n      placeholder\\n    });\\n    const userInput = \\\"userTest123\\\";\\n    const textInput = getByPlaceholderText(placeholder);\\n    fireEvent.change(textInput as Element, {\\n      target: { value: userInput }\\n    });\\n\\n    expect(onChange).toHaveBeenCalled();\\n    expect(textInput).toHaveValue(userInput);\\n  });\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"15\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"15\"\n  }, \"// TextInput.tsx\\nit(\\\"calls onChange\\\", () => {\\n    const onChange = jest.fn();\\n    const placeholder = \\\"Username\\\";\\n    const { getByPlaceholderText } = setup({\\n      onChange,\\n      placeholder\\n    });\\n    const userInput = \\\"userTest123\\\";\\n    const textInput = getByPlaceholderText(placeholder);\\n    fireEvent.change(textInput as Element, {\\n      target: { value: userInput }\\n    });\\n\\n    expect(onChange).toHaveBeenCalled();\\n    expect(textInput).toHaveValue(userInput);\\n  });\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"it(\\\"must set ziplookup when zipLookupSuccessful\\\", () => {\\n  const payload = { locationId: \\\"123\\\", someOtherProperty: \\\"ham\\\" };\\n  const state = {\\n    ...initialState,\\n    zipLookup: undefined\\n  };\\n  const expected = {\\n    ...initialState,\\n    zipLookup: {\\n      [payload.locationId]: payload\\n    }\\n  };\\n\\n  const result = ratingTool(\\n    state,\\n    ratingToolActions.zipLookupSuccessful(payload)\\n  );\\n\\n  expect(result).toEqual(expected);\\n});\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Other Features\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unmounting behavior\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More UserEvents (type, upload, hover, paste, etc)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Async Requests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React Router\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Much much More\")), mdx(\"hr\", null), mdx(\"h2\", null, \"WHERE TO GO NEXT\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Practice TDD\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exists in every react UI repository already\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read the README located in the root to learn more\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"testing-library.com & jestjs.io\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"codecoverage.cicd.pieinsurance.com\")), mdx(\"hr\", null), mdx(\"h2\", null, \"THANKS\"), mdx(\"img\", {\n    src: unitJoke,\n    style: {\n      width: '400px',\n      height: 'auto'\n    }\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","title":"React Testing and Us"}},"pageContext":{"id":"04f1086c-cfdd-5a71-ad12-f79a6dca0120","slug":"/react-testing-talk","title":"React Testing and Us"}},"staticQueryHashes":[]}